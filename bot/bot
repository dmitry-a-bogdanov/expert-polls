#!/usr/bin/env python3

import datetime
import locale
import sqlite3
from argparse import ArgumentParser, FileType
from functools import wraps

import telegram.utils
import telegram.utils.request
from telegram.ext import *
from telegram.ext.dispatcher import run_async

from bot_types import *
from storage import Storage

log = logging.getLogger(__name__)

DMITRY_BOGDANOV = 160453507  # type: int

global storage


class STATE:
    WAIT_FOR_PLACE = 0
    WAIT_FOR_DATE = 1
    WAIT_FOR_TIME = 2


def actualize_users(handler):
    @wraps(handler)
    def wrapped(update: Update, context: CallbackContext):
        storage.upsert_user(update.effective_user)
        return handler(update, context)

    return wrapped


def admins_only(handler):
    @wraps(handler)
    def wrapped(update: Update, context: CallbackContext):
        user = update.effective_user  # type: User
        if user.id != DMITRY_BOGDANOV:
            chat = update.effective_chat  # type: Chat
            context.bot.send_message(chat_id=chat.id, text='You are not my master')
            return ConversationHandler.END
        else:
            return handler(update, context)

    return wrapped


@actualize_users
@admins_only
def handle_start(update: Update, context: CallbackContext):
    log.info(f'user {update.effective_user} started conversation')

    storage.start_sessions(update.effective_user)

    places = storage.select_places()
    keyboard = [[p] for p in places.values()]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    update.message.reply_markdown('Что? - и так понятно. Где?', reply_markup=reply_markup)

    return STATE.WAIT_FOR_PLACE


@actualize_users
@admins_only
def handle_place(update: Update, context: CallbackContext):
    log.info(f'user {update.effective_user} sent place')
    msg = update.message  # type: Message
    place = msg.text_markdown
    storage.set_place_in_session(update.effective_user, place)

    today = datetime.date.today()
    keyboard = []  # type: List[List[str]]
    columns = 2
    rows = 4
    for i in range(rows):
        keyboard.append([])
        for j in range(columns):
            day = today + datetime.timedelta(days=columns * i + j)
            keyboard[i].append(day.strftime('%d.%m (%A)'))
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    update.message.reply_markdown('Когда?', reply_markup=markup)

    return STATE.WAIT_FOR_DATE


@actualize_users
@admins_only
def handle_date(update: Update, context: CallbackContext):
    log.info(f'user {update.effective_user} sent date')

    today = datetime.date.today()

    date_str = update.message.text  # type: str
    date_str = date_str.split(' ')[0]
    date = datetime.datetime.strptime(date_str, '%d.%m').date()
    date = date.replace(year=today.year)
    if date < today:
        date = date.replace(today.year + 1)

    storage.set_date_in_session(update.effective_user, date)

    markup = ReplyKeyboardMarkup(keyboard=[["11:00", "11:11", "19:00", "19:05"]], one_time_keyboard=True,
                                 resize_keyboard=True)

    update.message.reply_markdown('А точнее?', reply_markup=markup)

    return STATE.WAIT_FOR_TIME


@actualize_users
@admins_only
def list_places(update: Update, context: CallbackContext):
    log.info(f'asked for list places')
    places = storage.select_places()
    text = '\n'.join([f'{p[0]}) {p[1]}' for p in places.items()])
    update.message.reply_markdown(text)
    return None


@actualize_users
@admins_only
def remove_place(update: Update, context: CallbackContext):
    message = update.message  # type: Message
    command = message.entities[0]  # type: MessageEntity
    place_id = int(message.text[command.offset + command.length + 1:])
    storage.remove_place(place_id)
    return None


def poll_text(header: str) -> str:
    return f'{header}\n\nОбкашляем вопросики?'


def poll_header(place: str, date: datetime.date, time: datetime.time) -> str:
    return f'{date.strftime("%d %B %Y, %A")}. {time.strftime("%H:%M")}. {place}'


@actualize_users
@admins_only
def create_poll(update: Update, context: CallbackContext):
    msg = update.message  # type: Message
    command_entity = msg.entities[0]  # type: MessageEntity
    text = msg.text_markdown[command_entity.offset + command_entity.length + 1:]
    poll_id = storage.insert_poll(Poll(poll_text(text)))
    send_saved_poll(context.bot, update.message.chat.id, poll_id)
    return ConversationHandler.END


@actualize_users
@admins_only
def handle_time(update: Update, context: CallbackContext):
    log.info(f'user {update.effective_user} sent time')

    time_str = update.message.text  # type: str
    time = datetime.datetime.strptime(time_str, '%H:%M').time()

    storage.set_time_in_session(update.effective_user, time)

    (place, date, time) = storage.get_session(update.effective_user)

    text = poll_text(poll_header(place, date, time))
    poll_id = storage.insert_poll(Poll(text))

    send_saved_poll(context.bot, update.message.chat.id, poll_id)

    return ConversationHandler.END


def send_saved_poll(bot: Bot, chat_id: int, poll_id: PollId):
    poll = storage.select_poll(poll_id=poll_id)
    sent_message = bot.send_message(chat_id=chat_id,
                                    text=poll.build_text(),
                                    parse_mode=ParseMode.MARKDOWN,
                                    reply_markup=poll.build_markup())
    bot.send_message(chat_id=chat_id, text='Готово. Ещё? press /newpoll', reply_markup=ReplyKeyboardRemove())
    sent_message_id = MessageId(chat_id=sent_message.chat_id, message_id=sent_message.message_id)
    storage.insert_message(poll_id, sent_message_id)


@run_async
def update_poll_message(bot: Bot, poll: PollExt, msg: MessageId):
    try:
        bot.edit_message_text(chat_id=msg.chat_id,
                              message_id=msg.message_id,
                              inline_message_id=msg.inline_message_id,
                              text=poll.build_text(),
                              parse_mode=ParseMode.MARKDOWN,
                              reply_markup=poll.build_markup()
                              )
    except Exception as e:
        log.error(f'Cannot edit: {e}')


def update_poll_messages(bot: Bot, poll_id: PollId):
    messages = storage.select_messages(poll_id)
    poll = storage.select_poll(poll_id)
    for msg in messages:
        update_poll_message(bot, poll, msg)


@actualize_users
def handle_vote(update: Update, context: CallbackContext):
    query = update.callback_query  # type: CallbackQuery

    def parse_vote_data(data: str):
        [poll_id_str, option_id] = data.split(':')
        return int(poll_id_str), OPTION.from_string(option_id)

    poll_id, option = parse_vote_data(query.data)

    log.info(f'user {update.effective_user} vote for {option} in poll {poll_id}')

    storage.vote(poll_id, update.effective_user, option)

    update_poll_messages(context.bot, poll_id)
    query.answer()
    return None


@actualize_users
def handle_inline_query(update: Update, context: CallbackContext):
    query = update.inline_query  # type: InlineQuery
    poll_id = int(query.query)
    poll_ext = storage.select_poll(poll_id)
    bot = context.bot  # type: Bot
    bot.answer_inline_query(cache_time=0,
                            inline_query_id=query.id,
                            results=[InlineQueryResultArticle(
                                id=poll_id,
                                title=poll_ext.text,
                                input_message_content=InputTextMessageContent(
                                    message_text=poll_ext.build_text(),
                                    parse_mode=ParseMode.MARKDOWN
                                ),
                                reply_markup=poll_ext.build_markup()
                            )])
    return None


@actualize_users
def handle_chosen_inline_query(update: Update, context: CallbackContext):
    query = update.chosen_inline_result  # type: ChosenInlineResult
    poll_id = int(query.query)
    message_id = MessageId(inline_message_id=query.inline_message_id)
    storage.insert_message(poll_id, message_id)
    return None


@actualize_users
@admins_only
def handle_add_place(update: Update, context: CallbackContext):
    log.info(f'Adding place: {update.message}')
    msg = update.message  # type: Message
    command = msg.entities[0]  # type: MessageEntity
    place = msg.text[(command.length + command.offset + 1):]
    storage.insert_place(place)

    return None


def main():
    logging.basicConfig(level=logging.DEBUG,
                        format='[%(asctime)s %(filename)s:%(lineno)d:%(funcName)s %(name)s] %(levelname)s: %(message)s')

    locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")

    parser = ArgumentParser()
    parser.add_argument('--proxy', type=str)
    parser.add_argument('--db', type=str, required=True)
    token_args = parser.add_mutually_exclusive_group(required=True)
    token_args.add_argument('--token_file', type=FileType('r'))
    token_args.add_argument('--token', type=str)

    args = parser.parse_args()

    token = args.token_file.readline().rstrip() if args.token_file is not None else args.token

    connection = sqlite3.connect(args.db,
                                 detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES,
                                 check_same_thread=False)
    global storage
    storage = Storage(connection)

    request = telegram.utils.request.Request(proxy_url=args.proxy, con_pool_size=8)

    bot = Bot(token=token, request=request)
    updater = Updater(bot=bot, use_context=True)

    dispatcher = updater.dispatcher
    dispatcher.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler(['start', 'reset', 'newpoll', 'new_poll'], handle_start),
            CommandHandler(['add_place'], handle_add_place),
            CommandHandler(['list_places'], list_places),
            CommandHandler(['remove_place'], remove_place),
            CommandHandler(['create_poll'], create_poll)
        ],
        states={
            STATE.WAIT_FOR_PLACE: [MessageHandler(Filters.text, handle_place)],
            STATE.WAIT_FOR_DATE: [MessageHandler(Filters.text, handle_date)],
            STATE.WAIT_FOR_TIME: [MessageHandler(Filters.text, handle_time)]
        },
        fallbacks=[]
    ))
    dispatcher.add_handler(CallbackQueryHandler(
        callback=handle_vote
    ))
    dispatcher.add_handler(InlineQueryHandler(callback=handle_inline_query))
    dispatcher.add_handler(ChosenInlineResultHandler(callback=handle_chosen_inline_query))

    updater.start_polling(timeout=60)
    updater.idle()


if __name__ == '__main__':
    main()
